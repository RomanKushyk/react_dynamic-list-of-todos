{"version":3,"sources":["TodosContext.tsx","API/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoStatus","request","url","options","fetch","then","res","ok","Error","status","statusText","json","TodosContext","React","createContext","todos","setTodos","todoTitle","setTodoTitle","todoStatus","all","setTodoStatus","TodosProvider","children","useState","useEffect","data","contextValue","useMemo","Provider","value","TodoList","memo","selectedUserId","setSelectedUserId","useContext","handleChange","event","target","name","visibleTodos","filter","todo","lowerTodoTitle","title","toLowerCase","lowerSearchWords","includes","active","completed","getStatus","length","className","type","id","onChange","Object","keys","map","option","checked","readOnly","userId","onClick","CurrentUser","user","setUser","loadedUser","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78265e36.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { getTodos } from './API/api';\n\nexport enum TodoStatus {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ninterface TodosContextInterface {\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  todoTitle: string,\n  setTodoTitle: React.Dispatch<React.SetStateAction<string>>,\n  todoStatus: TodoStatus,\n  setTodoStatus: React.Dispatch<React.SetStateAction<TodoStatus>>,\n}\n\nexport const TodosContext\n  = React.createContext<TodosContextInterface>({\n    todos: [],\n    setTodos: () => {},\n    todoTitle: '',\n    setTodoTitle: () => {},\n    todoStatus: TodoStatus.all,\n    setTodoStatus: () => {},\n  });\n\nexport const TodosProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todoStatus, setTodoStatus] = useState(TodoStatus.all);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  }, []);\n\n  const contextValue = useMemo(() => ({\n    todos,\n    setTodos,\n    todoTitle,\n    setTodoTitle,\n    todoStatus,\n    setTodoStatus,\n  }), [todos, todoTitle, todoStatus]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options?: RequestInit) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return request('/todos');\n};\n\nexport const getUser = (id: number): Promise<User> => {\n  return request(`/users/${id}`);\n};\n","import React, {\n  Dispatch, memo, SetStateAction, useContext, useEffect, useMemo,\n} from 'react';\n\nimport './TodoList.scss';\n\nimport { TodosContext, TodoStatus } from '../../TodosContext';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: Dispatch<SetStateAction<number>>,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const {\n    todos,\n    todoStatus,\n    setTodoStatus,\n    todoTitle,\n    setTodoTitle,\n  } = useContext(TodosContext);\n\n  const handleChange = (event: React.ChangeEvent<\n  HTMLFormElement\n  | HTMLSelectElement\n  | HTMLInputElement\n  >) => {\n    const { value, name } = event.target;\n\n    switch (name) {\n      case 'todos-status-selector':\n        setTodoStatus(value);\n        break;\n\n      case 'todos-title-input':\n        setTodoTitle(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const prepareTodos = (preparedTodos: Todo[]) => (\n    preparedTodos.filter(todo => {\n      const lowerTodoTitle = todo.title.toLowerCase();\n      const lowerSearchWords = todoTitle.toLowerCase();\n\n      const getStatus = (status: TodoStatus) => {\n        switch (status) {\n          case TodoStatus.active:\n            return todo.completed === false;\n          case TodoStatus.completed:\n            return todo.completed === true;\n          default:\n            return true;\n        }\n      };\n\n      return lowerTodoTitle.includes(lowerSearchWords)\n        && getStatus(todoStatus);\n    })\n  );\n\n  const visibleTodos = useMemo(() => prepareTodos(todos),\n    [todoTitle, todoStatus, todos]);\n\n  useEffect(() => {\n  }, [todoTitle, todoStatus]);\n\n  return (\n    <>\n      {todos.length <= 0\n        ? 'Todos are loading'\n        : (\n          <div className=\"TodoList\">\n            <h2>Todos:</h2>\n\n            <div className=\"TodoList__list-container\">\n              <form className=\"TodoList__form form\">\n                <input\n                  type=\"text\"\n                  id=\"todos-title-input\"\n                  name=\"todos-title-input\"\n                  className=\"form__title-input\"\n                  value={todoTitle}\n                  onChange={handleChange}\n                />\n\n                <select\n                  id=\"todos-status-selector\"\n                  name=\"todos-status-selector\"\n                  className=\"form__status-selector\"\n                  value={todoStatus}\n                  onChange={handleChange}\n                >\n                  {Object.keys(TodoStatus).map(option => (\n                    <option value={option}>{option}</option>\n                  ))}\n                </select>\n              </form>\n\n              <ul className=\"TodoList__list\">\n                {visibleTodos.map(todo => (\n                  <li\n                    className={`TodoList__item TodoList__item--${\n                      todo.completed\n                        ? 'checked'\n                        : 'unchecked'\n                    }`}\n                    key={todo.id}\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className={\n                        'TodoList__user-button button '\n                      + `TodoList__user-button--${\n                        todo.userId === selectedUserId && 'selected'\n                      }`\n                      }\n                      type=\"button\"\n                      onClick={() => setSelectedUserId(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        )}\n    </>\n  );\n});\n","import React, {\n  Dispatch, memo, SetStateAction,\n  useEffect, useState,\n} from 'react';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../API/api';\n\ninterface Props {\n  selectedUserId: number,\n  setSelectedUserId: Dispatch<SetStateAction<number>>,\n}\n\nexport const CurrentUser: React.FC<Props> = memo(({\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then(loadedUser => setUser(loadedUser));\n  }, [selectedUserId, setSelectedUserId]);\n\n  return (\n    <>\n      {user === null\n        ? 'User is loading'\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user?.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n\n            <p className=\"CurrentUser__email\">{user?.email}</p>\n\n            <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n            <button\n              className=\"\n          CurrentUser__clear\n          button\n        \"\n              type=\"button\"\n              onClick={() => setSelectedUserId(0)}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n    </>\n  );\n});\n","import React, {\n  useState,\n} from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport './styles/form.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport {\n  TodosProvider,\n} from './TodosContext';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  return (\n    <TodosProvider>\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            setSelectedUserId={setSelectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                setSelectedUserId={setSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    </TodosProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}